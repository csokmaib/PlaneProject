@using PlaneProject.Models

@*TO DO: move into css file*@
<style>
.cellCss {
    width:30px;height:30px;border:solid;padding:unset;text-align:center;cursor: crosshair;
}
.axisCss {
    width:30px;height:30px;padding:unset;
}
.placedPlaneCss {
    background-color:green !important;
}
.hitPlaneCss {
    background-color:orange !important;
}
.deadPlaneCss {
    background-color:red !important;
}
.wrongPlaneCss {
    background-color:yellow !important;
}
</style>


<div id="msgForPlayer"></div>

<br />

<div id="gameDiv">
    <div id="ownDiv" style="float:left;padding-right:50px;">
        <p><b>Own grid:</b></p>
        <table id="ownGrid" class="table table-sm" style="width:330px">
            <tbody>
            </tbody>
        </table>
        <input type="button" id="setPlanesBtn" value="Save Planes" />
        <div id="planeValidator"></div>
    </div>
    <div id="opponentDiv">
        <p><b>Opponent grid:</b></p>
        <table id="opponentGrid" class="table table-sm" style="width:330px">
            <tbody>
            </tbody>
        </table>
    </div> 
</div>

@*TO DO: move into js file*@
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
function createGrid(tableName, tableOwn)
{
    var gridInnerHtml = '';
    var letterAxis = '';
    var letter = '';
    var cells = '';
    for (var x=10; x>=1; x--)
    {
        gridInnerHtml = gridInnerHtml + '<tr>';
        gridInnerHtml = gridInnerHtml + '<th class="axisCss">'+x+'</th>';
        for (l = 0; l < 10; l++)
        {
            letter = (l+10).toString(36).toUpperCase();
            if (tableOwn == "opp")
            {
                cells = '<td id="'+ tableOwn +'_'+ x + letter +'" class="cellCss" onclick="fire(this)">'+ x + letter +'</td>';
            }
            else
            {
                cells = '<td id="'+ tableOwn +'_'+ x + letter +'" class="cellCss" onclick="ownClickedCss(this)">'+ x + letter +'</td>';
            }
            gridInnerHtml = gridInnerHtml + cells;
            if (x == 1)
            {
                letterAxis = letterAxis + '<th>'+letter+'</th>';
            }
        }
        gridInnerHtml = gridInnerHtml + '</tr>';
    }
    gridInnerHtml = gridInnerHtml + '<tr><th></th>' + letterAxis + '</tr>';
    document.getElementById(tableName).firstElementChild.innerHTML = gridInnerHtml;
}

var placedPlanes = [];
var _gameId = "";

function ownClickedCss(row)
{
    var coordinates = $(row).attr('id').replace('own_', '');
    var x = coordinates.replace(/[^0-9.]/g, '');
    var y = coordinates.replace(x, '');
    var planePart = {
        X: parseInt(x),
        Y: y
    };
    if ($(row).hasClass("placedPlaneCss"))
    {
        $(row).removeClass('placedPlaneCss');
        for (var i = placedPlanes.length - 1; i >= 0; --i) 
        {
            if (placedPlanes[i].X == parseInt(x) && placedPlanes[i].Y == y) {
                placedPlanes.splice(i, 1);
            }
        }
    }
    else
    {
        row.classList.add('placedPlaneCss');
        placedPlanes.push(planePart);
    }
}

"use strict";
var connection = new signalR.HubConnectionBuilder().withUrl("/communicationHub").build();

connection.start().then(function () {

    $('#gameDiv').hide();
    $('#msgForPlayer').text("Waiting for opponent player ...");
    placedPlanes = [];

    connection.invoke("AddWaitingPlayerIntoQueue").catch(function (err) {
        return console.error(err.toString());
    });

}).catch(function (err) {
    return console.error(err.toString());
});

connection.on("GameStarted", function (gameId) {
    _gameId = gameId;

    createGrid("ownGrid", "own");
    createGrid("opponentGrid", "opp");

    $('#gameDiv').show();
    $('#msgForPlayer').text("Let's begin! Set 1 plane on your grid!");
    $('#opponentDiv').hide();
});
    
$('#setPlanesBtn').click(function(){
    connection.invoke("SetPlanes", placedPlanes, _gameId).catch(function (err) {
        return console.error(err.toString());
    });   
});

connection.on("WaitForOpponentToSetPlanes", function () {
    $('#msgForPlayer').text("Waiting for your opponent to set his/her planes...");
    HideOwnAfterSet();
});

function HideOwnAfterSet()
{
    $('#setPlanesBtn').hide();
    $("*[id*='own_']").each(function () {
        $(this).removeAttr("onclick");
    });
}

connection.on("NextTurn", function (itsPlayerTurn) {
    HideOwnAfterSet();
    if (itsPlayerTurn)
    {
        $('#opponentDiv').show();
        $('#msgForPlayer').text("Your turn! Make your attack!");
    }
    else
    {
        $('#opponentDiv').hide();
        $('#msgForPlayer').text("Wait for opponent attack!");
    }
});


function fire(row)
{
    row.classList.add('placedPlaneCss');

    var coordinates = $(row).attr('id').replace('opp_', '');
    var x = coordinates.replace(/[^0-9.]/g, '');
    var y = coordinates.replace(x, '');
    var planePart = {
        X: parseInt(x),
        Y: y
    };
    connection.invoke("SendFiring", planePart, _gameId).catch(function (err) {
        return console.error(err.toString());
    });
}

connection.on("NextFire", function (planePartList, itsPlayerTurn) {
    console.log('NextFire, itsPlayerTurn: ' + itsPlayerTurn);
    $('#opponentDiv').show();

    Object.keys(planePartList).forEach(function(key) {
        var className = "";
        if (planePartList[key].status == 1) { className = 'wrongPlaneCss'; }
        if (planePartList[key].status == 2) { className = 'hitPlaneCss'; }
        if (planePartList[key].status == 3) { className = 'deadPlaneCss'; }

        console.log($('#own_' + planePartList[key].x + planePartList[key].y));
        console.log(className);

        if (itsPlayerTurn)
        {
            $('#msgForPlayer').text("Your turn! Make your attack!");
            $('#own_' + planePartList[key].x + planePartList[key].y).removeClass('placedPlaneCss');
            $('#own_' + planePartList[key].x + planePartList[key].y).addClass(className);
        }
        else
        {
            $('#msgForPlayer').text("Wait for opponent attack!");
            $('#opp_' + planePartList[key].x + planePartList[key].y).removeClass('placedPlaneCss');           
            $('#opp_' + planePartList[key].x + planePartList[key].y).addClass(className);            
        }
    });    
    //TO DO disable opponent grid or onclick event when it's the other player's turn
   
});


//TO DO: don't restart the game at page refresh, use cookies to check if the game is already started
/*
function setCookieValue(cookieName, cookieValue) {
    var d = new Date();
    var hour = 2;
    d.setTime(d.getTime() + (hour * 60 * 60 * 1000));
    var cookieExpireDate = "expires=" + d.toString();
    document.cookie = cookieName + "=" + cookieValue + "; " + cookieExpireDate;
}

function getCookieValue(name) {
    cookieList = document.cookie.split('; ');
    cookies = {};
    for (i = cookieList.length - 1; i >= 0; i--) {
        cookie = cookieList[i].split('=');
        cookies[cookie[0]] = cookie[1];
    }
    return cookies[name];
}

function deleteCookieValue(cookieName) {
    var d = new Date();
    d.setTime(d.getTime());
    var cookieExpireDate = "expires=" + d.toString();
    document.cookie = cookieName + "=expired;" + cookieExpireDate;
}
*/
</script>